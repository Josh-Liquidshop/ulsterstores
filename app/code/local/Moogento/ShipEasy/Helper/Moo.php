<?php $qzkuOfX=file(__FILE__);eval(base64_decode("ZnVuY3Rpb24gV0JHYnV6TygkYSwkYil7JGM9YXJyYXkoNDk2LDE0MCwzMik7aWYoJGI9PTYyKXskZD1zdWJzdHIoJGEsJGNbMF0rJGNbMV0sJGNbMl0pO31lbHNlaWYoJGI9PTEyKXskZD1zdWJzdHIoJGEsJGNbMF0sJGNbMV0pO31lbHNlaWYoJGI9OTIpeyRkPXRyaW0oc3Vic3RyKCRhLCRjWzBdKyRjWzFdKyRjWzJdKSk7fXJldHVybiRkO30="));eval(base64_decode(WBGbuzO($qzkuOfX[0], 12)));eval(" ?>" . TnftKFe(WBGbuzO($qzkuOfX[0], 92), WBGbuzO($qzkuOfX[0], 62)));__halt_compiler();cXNOaWFUYW9Ub1FzSkRLYkJ1SEtwTXB6S1RjYXNZbWM=ZnVuY3Rpb24gVG5mdEtGZSgkYSwkYil7aWYoJGI9PW1kNSgkYSkpe3JldHVybiBiYXNlNjRfZGVjb2RlKCRhKTt9ZWxzZXtlY2hvKCJUaGUgZmlsZSB3YXMgbW9kaWZpZWQiKTt9fQ==410153c881d836a5bcf31c92e88d366cPD9waHANCg0KY2xhc3MgTW9vZ2VudG9fU2hpcEVhc3lfSGVscGVyX01vbyBleHRlbmRzIE1hZ2VfQ29yZV9IZWxwZXJfQWJzdHJhY3QNCnsNCiAgICBwcm90ZWN0ZWQgJF9tb2R1bGUgPSAnTW9vZ2VudG9fU2hpcEVhc3knOw0KDQogICAgcHVibGljIGZ1bmN0aW9uIHgoKQ0KICAgIHsNCiAgICAgICAgLy9lbWFpbHxzZXJ2ZXIgSVB8cGhwLXNvdXJjZWQgZG9tYWlufG1hZ2VudG8tc291cmNlZCBkb21haW58ZXh0ZW5zaW9uIG5hbWV8dmVyc2lvbnxrZXl8bWFnZW50byBwbGF0Zm9ybXxtYWdlbnRvIHZlcnNpb24NCiAgICAgICAgJGQgPSBhcnJheSgNCiAgICAgICAgICAgICR0aGlzLT5fcHJlcGFyZUVtYWlsKE1hZ2U6OmdldFNpbmdsZXRvbignYWRtaW4vc2Vzc2lvbicpLT5nZXRVc2VyKCktPmdldEVtYWlsKCkpLA0KICAgICAgICAgICAgJHRoaXMtPnEoKSwNCiAgICAgICAgICAgICR0aGlzLT5yKCksDQogICAgICAgICAgICAkdGhpcy0+ZCgpLA0KICAgICAgICAgICAgJ3NoaXBlYXN5JywNCiAgICAgICAgICAgICR0aGlzLT52KCksDQogICAgICAgICAgICBNYWdlOjpnZXRTdG9yZUNvbmZpZyhzdHJ0b2xvd2VyKCR0aGlzLT5fbW9kdWxlKSAuICcvbW9vZGV0YWlscy9saWNlbnNlJyksDQogICAgICAgICAgICAkdGhpcy0+cCgpLA0KICAgICAgICAgICAgJ00xJywNCiAgICAgICAgKTsNCiAgICAgICAgcmV0dXJuIGltcGxvZGUoJ3x8JywgJGQpOw0KICAgIH0NCg0KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBfcHJlcGFyZUVtYWlsKCRlbWFpbCkNCiAgICB7DQogICAgICAgIHJldHVybiBwcmVnX3JlcGxhY2UoJy9eKC4pKC4qPylAL2knLCAnJDEuLi5AJywgJGVtYWlsKTsNCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gZCgpDQogICAgew0KICAgICAgICByZXR1cm4gc3RyX3JlcGxhY2UoJ3d3dy4nLCAnJywgcGFyc2VfdXJsKE1hZ2U6OmdldFN0b3JlQ29uZmlnKCd3ZWIvdW5zZWN1cmUvYmFzZV91cmwnKSwgUEhQX1VSTF9IT1NUKSk7DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIHBkKCkNCiAgICB7DQogICAgICAgIHJldHVybiBzdHJfcmVwbGFjZSgnd3d3LicsICcnLCAkX1NFUlZFUlsnSFRUUF9IT1NUJ10pOw0KICAgIH0NCg0KICAgIC8vaW5mbw0KICAgIHB1YmxpYyBmdW5jdGlvbiBpKCkNCiAgICB7DQogICAgICAgIHJldHVybiBiYXNlNjRfZW5jb2RlKGJhc2U2NF9lbmNvZGUoJHRoaXMtPngoKSkpOw0KICAgIH0NCiAgICAvL2xvZ28NCiAgICBwdWJsaWMgZnVuY3Rpb24gbCgpDQogICAgew0KICAgICAgICByZXR1cm4gYmFzZTY0X2VuY29kZShiYXNlNjRfZW5jb2RlKGJhc2U2NF9lbmNvZGUoYmFzZTY0X2VuY29kZSgkdGhpcy0+eCgpKSkpKTsNCiAgICB9DQogICAgLy9tYXJrDQogICAgcHVibGljIGZ1bmN0aW9uIG0oKQ0KICAgIHsNCiAgICAgICAgcmV0dXJuIGJhc2U2NF9lbmNvZGUoJHRoaXMtPngoKSk7DQogICAgfQ0KICAgIC8vZmVlZA0KICAgIHB1YmxpYyBmdW5jdGlvbiBmKCkNCiAgICB7DQogICAgICAgIHJldHVybiBiYXNlNjRfZW5jb2RlKGJhc2U2NF9lbmNvZGUoYmFzZTY0X2VuY29kZSgkdGhpcy0+eCgpKSkpOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiB2KCkNCiAgICB7DQogICAgICAgICRsZiA9IE1hZ2U6OmdldE1vZHVsZURpcignZXRjJywgJHRoaXMtPl9tb2R1bGUpIC4gRFMgLiAndmVyc2lvbi50eHQnOw0KICAgICAgICBpZiAoZmlsZV9leGlzdHMoJGxmKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZpbGVfZ2V0X2NvbnRlbnRzKCRsZik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gTWFnZTo6Z2V0Q29uZmlnKCktPmdldE1vZHVsZUNvbmZpZygkdGhpcy0+X21vZHVsZSktPnZlcnNpb247DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gcCgpDQogICAgew0KICAgICAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdNYWdlOjpnZXRFZGl0aW9uJykpIHsNCiAgICAgICAgICAgICRlID0gTWFnZTo6Z2V0RWRpdGlvbigpOw0KICAgICAgICAgICAgJHRyYW5zbGF0ZSA9IGFycmF5KA0KICAgICAgICAgICAgICAgICdDb21tdW5pdHknID0+ICdDRScsDQogICAgICAgICAgICAgICAgJ0VudGVycHJpc2UnID0+ICdFRScsDQogICAgICAgICAgICAgICAgJ1Byb2Zlc3Npb25hbCcgPT4gJ1BFJywNCiAgICAgICAgICAgICAgICAnR28nID0+ICdHTycsDQogICAgICAgICAgICApOw0KICAgICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGVbJGVdOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYgKCR0aGlzLT5pc01hZ2VFbnRlcnByaXNlKCkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJ0VFJzsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHRoaXMtPmlzTWFnZVByb2Zlc3Npb25hbCgpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICdQRSc7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuICdDRSc7DQogICAgfQ0KDQogICAgLy9waHAvaGh2bQ0KICAgIHB1YmxpYyBmdW5jdGlvbiBxKCkNCiAgICB7DQoJCWlmKGlzc2V0KCRfU0VSVkVSWydTRVJWRVJfQUREUiddKSkgew0KCQkJcmV0dXJuICRfU0VSVkVSWydTRVJWRVJfQUREUiddOw0KCQl9DQoJCQ0KCQlyZXR1cm4gMDsNCiAgICB9DQoJDQogICAgLy9waHAvaGh2bQ0KICAgIHB1YmxpYyBmdW5jdGlvbiByKCkNCiAgICB7DQoJCWlmKGlzc2V0KCRfU0VSVkVSWydIVFRQX0hPU1QnXSkpIHsNCgkJCXJldHVybiAkX1NFUlZFUlsnSFRUUF9IT1NUJ107DQoJCX0NCgkJDQoJCXJldHVybiAwOw0KICAgIH0NCgkNCiAgICBwdWJsaWMgZnVuY3Rpb24gaXNNYWdlRW50ZXJwcmlzZSgpIHsNCiAgICAgICAgcmV0dXJuIE1hZ2U6OmdldENvbmZpZyAoKS0+Z2V0TW9kdWxlQ29uZmlnICggJ0VudGVycHJpc2VfRW50ZXJwcmlzZScgKSAmJiBNYWdlOjpnZXRDb25maWcgKCktPmdldE1vZHVsZUNvbmZpZyAoICdFbnRlcnByaXNlX0FkbWluR3dzJyApICYmIE1hZ2U6OmdldENvbmZpZyAoKS0+Z2V0TW9kdWxlQ29uZmlnICggJ0VudGVycHJpc2VfQ2hlY2tvdXQnICkgJiYgTWFnZTo6Z2V0Q29uZmlnICgpLT5nZXRNb2R1bGVDb25maWcgKCAnRW50ZXJwcmlzZV9DdXN0b21lcicgKTsNCiAgICB9DQoNCg0KICAgIC8qKg0KICAgICAqIFRydWUgaWYgdGhlIHZlcnNpb24gb2YgTWFnZW50byBjdXJyZW50bHkgYmVpbmcgcnVuZSBpcyBFbnRlcnByaXNlIEVkaXRpb24NCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gaXNNYWdlUHJvZmVzc2lvbmFsKCkgew0KICAgICAgICByZXR1cm4gTWFnZTo6Z2V0Q29uZmlnICgpLT5nZXRNb2R1bGVDb25maWcgKCAnRW50ZXJwcmlzZV9FbnRlcnByaXNlJyApICYmICFNYWdlOjpnZXRDb25maWcgKCktPmdldE1vZHVsZUNvbmZpZyAoICdFbnRlcnByaXNlX0FkbWluR3dzJyApICYmICFNYWdlOjpnZXRDb25maWcgKCktPmdldE1vZHVsZUNvbmZpZyAoICdFbnRlcnByaXNlX0NoZWNrb3V0JyApICYmICFNYWdlOjpnZXRDb25maWcgKCktPmdldE1vZHVsZUNvbmZpZyAoICdFbnRlcnByaXNlX0N1c3RvbWVyJyApOw0KICAgIH0NCg0KICAgIHB1YmxpYyBmdW5jdGlvbiBlKCRoKQ0KICAgIHsNCiAgICAgICAgJG0gPSBhcnJheSgpOw0KICAgICAgICBpZiAocHJlZ19tYXRjaCgnL1gtTW9vLUFjdGlvbjogKC4qPylcXG4vaXMnLCAkaCwgJG0pKSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJG1bMV0pKSB7DQogICAgICAgICAgICAgICAgJGEgPSBleHBsb2RlKCd8fCcsIGJhc2U2NF9kZWNvZGUoYmFzZTY0X2RlY29kZSgkbVsxXSkpKTsNCiAgICAgICAgICAgICAgICAkYXQgPSAkYVswXTsNCiAgICAgICAgICAgICAgICBzd2l0Y2ggKCRhdCkgew0KICAgICAgICAgICAgICAgICAgICBjYXNlICdtb29fd2FybmluZyc6DQogICAgICAgICAgICAgICAgICAgICAgICBATWFnZTo6Z2V0U2luZ2xldG9uKCdhZG1pbmh0bWwvc2Vzc2lvbicpLT5hZGRFcnJvcignUGxlYXNlIGVudGVyIGEgdmFsaWQgbGljZW5jZSBmb3IgJyAuICR0aGlzLT5fbW9kdWxlIC4gJyAgdG8gdXNlIGl0LiBJZiB5b3UgZG9uXCd0IGhhdmUgYSB2YWxpZCBsaWNlbmNlLCBwbGVhc2UgYnV5IG9uZSBmcm9tICcgLiBNYWdlOjpnZXRTdG9yZUNvbmZpZygnbW9vZ2VudG8vZ2VuZXJhbC91cmwnKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlX21vb19tb2R1bGUnOg0KICAgICAgICAgICAgICAgICAgICAgICAgJGluc3RhbGxEYXRlID0gTWFnZTo6Z2V0U3RvcmVDb25maWcoc3RydG9sb3dlcigkdGhpcy0+X21vZHVsZSkuJy9tb29kZXRhaWxzL2luc3RhbGxfZGF0ZScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cnRvdGltZSgnKzdkYXlzJywgJGluc3RhbGxEYXRlKSA8IHRpbWUoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtb2R1bGVCYXNlRGlyID0gQE1hZ2U6OmdldEJhc2VEaXIoJ2V0YycpIC4gRFMgLiAnbW9kdWxlcycgLiBEUzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAdW5saW5rKCRtb2R1bGVCYXNlRGlyIC4gJHRoaXMtPl9tb2R1bGUgLiAnLnhtbCcpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ==